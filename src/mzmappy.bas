/*
/* MZ-MAPPY PRO68K
/*
/* Programmed 2024 by ABURI6800 (Hitoshi Iwai)
/* 
/* MIT License.
/*
screen 0, 2, 1, 1   /* 表示画面サイズ 256x256,グラフィック画面 512x512 256色,高解像度
sp_init()           /* スプライト画面初期化
sp_clr()            /* 全スプライトパターンクリア
sp_disp(1)          /* スプライト画面表示
sp_on()             /* 全プレーンのスプライト表示
/* 定数
int C_BG_WIDTH = 54
int C_DISP_WIDTH = 32
/*
int C_GAME_STATUS_INIT = 0
int C_GAME_STATUS_TITLE = 1
int C_GAME_STATUS_OPENING = 2
int C_GAME_STATUS_ROUNDINIT = 3
int C_GAME_STATUS_START = 4
int C_GAME_STATUS_MAIN = 5
int C_GAME_STATUS_CLEAR = 6
int C_GAME_STATUS_MISS = 7
int C_GAME_STATUS_OVER = 8
int C_GAME_STATUS_OPTION = 9
int C_GAME_STATUS_QUIT = -1
/*
int C_DIR_LEFT = 0
int C_DIR_RIGHT = 1
int C_DIR_CENTER = 2
/*
dim char title_chr(32 * 6)
/* タイトルのキャラクターデータ
/*             0                                       1                                       2                                       3
/*             0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1
title_chr = {  0, 67, 67, 77, 78, 67, 67,   0,  0, 78, 67, 67, 77,  0,   0, 67, 67, 67, 67, 77,   0, 67, 67, 67, 67, 77,   0, 67, 67,  0, 67, 67
            ,114,112, 66, 86,112,115, 67,   0,118,112,112, 66, 67, 77, 114,112,112,112, 66, 67, 114,112,112,112, 66, 67, 114,115, 67,114,115, 67
            ,113,  0,  0,  0,  0, 61, 67, 118,  0, 59,123,  0, 66, 67, 113,  0, 67,  0, 61, 67, 113,  0, 67,  0, 61, 67, 113, 61, 67,113, 61, 67
            ,113,  0,  0,  0,  0, 61, 67, 113,  0, 59,123,  0, 61, 67, 113,  0, 67,  0, 61, 86, 113,  0, 67,  0, 61, 86, 113,  0,  0,  0, 61, 67
            ,113, 61, 77,118,113, 61, 67, 113,  0,  0,  0,  0, 61, 67, 113,  0,  0,  0,118,  0, 113,  0,  0,  0,118,  0, 113,  0,  0,  0, 61, 67
            , 50, 51,  0,  0, 50, 51,  0,  50, 51,112,112, 50, 51,  0,  50, 51,112,112,  0,  0,  50, 51,112,112,  0,  0, 112,112,112, 50, 51,  0
          }
/* ドアのキャラクターデータ
dim char dr_chr(5, 11) 
dr_chr = {114,115,  0,  0  /* (0, 0〜11) オープン・左
         , 55, 61,  0,  0
         , 50, 51,  0,  0
         ,  0,  0,114,115  /* (1, 0〜11) オープン・右
         ,  0,  0,113, 63
         ,  0,  0, 50, 51
         ,  0, 53,121,  0  /* (2, 0〜11) 通常ドアクローズ・左
         ,  0,123,121,  0
         ,  0, 53,121,  0
         ,  0, 53,121,  0  /* (3, 0〜11) 通常ドアクローズ・右
         ,  0, 53, 59,  0
         ,  0, 53,121,  0
         ,  0, 30, 94,  0  /* (4, 0〜11) パワードアクローズ・左
         ,  0, 82, 94,  0
         ,  0, 30, 94,  0
         ,  0, 30, 94,  0  /* (5, 0〜11) パワードアクローズ・右
         ,  0, 30, 84,  0
         ,  0, 30, 94,  0
}
/* 変数
int i, j 
int tick                /* ゲーム経過時間
int trg                 /* トリガ入力バッファ
int trg_on_flg          /* トリガ入力フラグ
int stk                 /* ジョイスティック入力バッファ
int pb                  /* パレットブロック
str errmsg[255]         /* エラーメッセージ
dim char offscr(54*29)  /* オフスクリーン
int game_status = 0     /* ゲーム状態
int opt_machine = 0     /* オプション：マシーンモード
int opt_level = 1       /* オプション：ゲームレベル
int opt_left = 1        /* オプション：プレイヤー数
/*
int round = 0           /* ラウンド数
int score = 0           /* スコア
int hiscore = 20000     /* ハイスコア
int mp_left = 0         /* 残機数
int bg_x = 0            /* BG面の表示位置
/* 得点
int item_multiple = 1   /* 盗品の得点倍率
int item_left = 0       /* 盗品の残り
str item_score          /* アイテム得点表示
int item_scote_x        /* アイテム得点表示X座標
int item_scote_y        /* アイテム得点表示Y座標
int item_score_cnt = 0  /* アイテム得点表示カウンタ
/* マッピー
int mp_x = 48           /* マッピーX座標
int mp_y = 28           /* マッピーY座標
int mp_vx = 0           /* マッピーX移動量
int mp_vy = 0           /* マッピーY移動量
int mp_wait_value       /* マッピーウェイト値
int mp_wait_cnt         /* マッピーウェイトカウンタ
int mp_dir = 0          /* マッピーの向き(0=左、1=右)
int mp_pb = 0
int mp_anim = 0         /* マッピーのアニメパターン(0, 1)
int mp_cond = 0         /* マッピーの状態(0=床移動,1=トランポリン移行中,2=トランポリン,3=床移動移行中)
int mp_tpix = 255       /* マッピーが最後に乗ったトランポリンのインデックス
/* 敵
int en_type(8)          /* 敵の種類(1=ミューキーズ,2=ニャームコ,3=ご先祖様)
int en_x(8)             /* 敵X座標
int en_y(8)             /* 敵Y座標
int en_vx(8)            /* 敵X移動量
int en_vy(8)            /* 敵Y移動量
int en_wait_value(8)    /* 敵ウェイト値
int en_wait_cnt(8)      /* 敵ウェイトカウンタ
int en_sleep_cnt(8)     /* 敵停止カウンタ(0=動作、1〜=停止)
int en_dir(8)           /* 敵キャラクターの向き(0=左、1=右)
int en_pb(8)            /* 敵キャラクターのパレットブロック値
int en_sprno(8)         /* 敵キャラクターの基準スプライトパターン番号
int en_anim(8)          /* 敵キャラクターアニメパターン(0, 1, 2)
int en_cond(8)          /* 敵の状態(0=床移動,1=トランポリン移行中,2=トランポリン,3=床移動移行中,4=着地後振り向きチェック中,5=気絶)
int en_target_y(8)      /* 敵の目標Y座標
int en_target_dir(8)    /* 敵の目標方向
/* トランポリン
int tp_x(8)             /* トランポリンX座標
int tp_y(8)             /* トランポリンY座標
int tp_cond(8)          /* トランポリンの状態(0=破れた、1=あと1回、2〜4=通常)
/* ドア
int dr_x(10)            /* ドアX座標
int dr_y(10)            /* ドアY座標
int dr_dir(10)          /* ドアの種類(0=左ノブ、1=右ノブ)
int dr_cond(10)         /* ドアの状態(0=オープン、1=通常ドアクローズ、2=パワードアクローズ)
int dr_n                /* 操作対象ドア
/* 盗品
int it_x(9)             /* 盗品のX座標
int it_y(9)             /* 盗品のY座標
int it_cond(9)          /* 盗品の状態(0=取得済、1=通常、2=2倍)
int it_type(9)          /* 盗品の種類(1=カセット、2=テレビ、3＝マイコン、4=モナリサ、5=キンコ．)
/*
/* キャラクター定義
/*
sprite_pallet()     /* スプライトパレット定義
sprite_pattern()    /* スプライトパターン定義
bg_pattern()        /* BGパターン定義
/*
/* メインルーチン
/*
while game_status <> C_GAME_STATUS_QUIT
  switch game_status
    case 0 : game_init()      : break
    case 1 : game_title()     : break
    case 2 : game_opening()   : break
    case 3 : game_roundinit() : break
    case 4 : game_start()     : break
    case 5 : game_main()      : break
    case 6 : game_clear()     : break
/*    case 7 : game_miss()      : break
/*    case 8 : game_over()      : break
    case 9 : game_option()    : break
    default : break
  endswitch
endwhile
/* 終了処理
m_stop()
erase_all()
screen 2,0,1,0
if (errmsg <> "") then {
  print "エラー：" ; errmsg
  while (inkey$(0) = "")
  endwhile
}
end
/*
/* 操作入力
/*
func get_control()
  int t
  /* レバー入力
  stk = stick(1)
  /* トリガ入力
  t = strig(1)
  if (trg_on_flg = 0) and (t > 0) then {
    trg_on_flg = 1
    trg = t
  } else {
    if (t = 0) then {
      trg_on_flg = 0
    }
  }
  /* ESCキーで終了
  if (inkey$(0) = chr$(27)) then {
    game_status = C_GAME_STATUS_QUIT
  }
endfunc
/*
/* ゲーム初期化
/*
func game_init()
  /* 設定初期化
  round = 1
  score = 0
  mp_left = opt_left * 2 + 1
  /* サウンド初期化
  m_init()
  /* トラックシーケンスメモリ確保
  m_alloc(1, 100)
  m_alloc(2, 200)
  m_alloc(3, 1000)
  m_alloc(4, 100)
  m_alloc(5, 100)
  m_alloc(6, 100)
  /* trk1 : メインループウェイト用
  m_trk(1, "@1t180@l2o1v0rrr")
  /* trk2 : オープニング
  m_trk(2, "@31t160l16o3v13f#8ga8f# g8ab8g a8b<c8>a b8<cd8>b <c8de8c d8ef#8a b8.a8ba8ba8br2")
  /* trk3 : メインBGM
  m_trk(3, "@31t180l8o4v13")
  m_trk(3, "|:c#ag#aa#4a4gagdg4.r")
  m_trk(3, "gf#ga4g4fgfdc4.r")
  m_trk(3, ">a<edc>a<edcr")
  m_trk(3, "agcfe16r16d16r16c16r16:|")
  m_trk(3, "|:5>a<ce:||:5>gb<d:|")
  m_trk(3, "l16>a.<cd8>b.<de8c.ef#8d.f#g8e.ga8f#.ab8")
  m_trk(3, "<c.>b<c>b<c>b<c>l8")
  m_trk(3, "|:c#ag#aa#4a4gagdg4.r")
  m_trk(3, "gf#ga4g4fgfdc4.r")
  m_trk(3, ">a<edc>a<edcr")
  m_trk(3, "agcfe16r16d16r16c16r16:|")
  m_trk(3, "agaa#agac<edc>g4.r gf#gagabr<c>bgara#r")
  m_trk(3, "agaa#agarf#g<ce16.d16e16.dd16c16d16r16")
  m_trk(3, "f#.d16.c16.d16.>b16.f#16.g16.a16.g16.agf#edg16.rg16.r")
  /* trk4 : エクステンド
  m_trk(4, "@31t180l8o5v13dc16>af#16<c#.d#.f2.")
  /* trk5 : ラウンドクリア
  m_trk(5, "@31t180l8o4v13r2ga16bg16er16dr.f#r16gr2")
  /* trk6 : ミス
  m_trk(6, "@31t180l8o4v13e<c16>a#g16<c#c16>a#g16d#4&d#16dr2")
  /* ゲーム状態を変更
  game_status = C_GAME_STATUS_TITLE /* タイトル
endfunc
/*
/* タイトル
/*
func game_title()
  int i, j
  str s
  /* 画面消す
  erase_all()
  mp_y = 9
  trg = 0
  bg_set(0, 0, 0)
  bg_set(1, 1, 0)
  for i = 0 to 5
    for j = 0 to 31
      bg_put(1, j, 2 + i, pat_dat(0, 0, 1, title_chr(i * 32 + j)))
    next
  next
  s = "PUSH TRIGGER TO START !!"
  bg_print( 4, 12, s)
  s = "1ST EXTEND 20000PT"
  bg_print( 7, 15, s)
  s = "2ND EXTEND 70000PT"
  bg_print( 7, 18, s)
  s = "(C)NAMCO"
  bg_print(12, 22, s)
  s = "PROGRAM ARRANGED BY DEMPA"
  bg_print( 0, 26, s)
  s = "& GAME ROMAN"
  bg_print(20, 27, s)
  s = "REPROGRAMMED BY ABURI GAMES 2024"
  bg_print( 0, 29, s)
  bg_set(0, 0, 1)
  bg_set(1, 1, 1)
  trg = 0
  while trg = 0
    get_control()
    if (game_status = C_GAME_STATUS_QUIT) then {
      return()
    }
  endwhile
  /*
  /* 画面消す
  erase_all()
  s = "START"
  bg_print( 15, 10, s)
  s = "OPTION"
  bg_print( 15, 12, s)
  trg = 0
  while trg = 0
    get_control()
    if (game_status = C_GAME_STATUS_QUIT) then {
      return()
    }
    if (stk = 8) then mp_y = 9
    if (stk = 2) then mp_y = 11
    sp_move(0, 12 * 8, mp_y * 8 + 4, 66)
  endwhile
  /* ゲーム状態を変更
  if (mp_y = 9) then {
    game_status = C_GAME_STATUS_OPENING /* オープニング
  } else {
    game_status = C_GAME_STATUS_OPTION  /* オプション
  }
endfunc
/*
/* ゲームオープニング
/*
func game_opening()
  str s
  erase_all()
  bg_set(0, 0, 0)
  bg_set(1, 1, 0)
  for i =0 to 31
    bg_put(1, i, 30, pat_dat(0, 0, 1, &H4A))
    bg_put(1, i, 31, pat_dat(0, 0, 1, &H4A))
  next
  s = "NOW ON GO TO THE STORY !"
  bg_print(4, 9, s)
  bg_set(0, 0, 1)
  bg_set(1, 1, 1)
  /* ニャームコ
  if (opt_machine = 0) or (opt_machine = 1) then {
    bg_put(1, 6, 28, pat_dat(0, 0, 1, 78))
    bg_put(1, 7, 28, pat_dat(0, 0, 1, 78))
    bg_put(1, 6, 29, pat_dat(0, 0, 1, 107))
    bg_put(1, 7, 29, pat_dat(0, 0, 1, 107))
  } else {
    sp_move(1, spr_x(6),  spr_y(28), 80) 
  }
  sp_move(2, spr_x(10), spr_y(28), 73) /* ミューキーズ左
  sp_move(3, spr_x(13), spr_y(28), 73) /* ミューキーズ左
  sp_move(4, spr_x(16), spr_y(28), 73) /* ミューキーズ左
  sp_move(5, spr_x(24), spr_y(28), 65) /* マッピー
  /* オープニング曲
  m_assign(1, 2) /* ch1 : trk2(オープニング)
  m_play(1)
  while m_stat(1) = 1
  endwhile
  /* ゲーム状態を変更
  game_status = C_GAME_STATUS_ROUNDINIT /* ラウンド初期化
endfunc
/*
/* ラウンド初期化
/*
func game_roundinit()
  str s
  /*
  /* ラウンド数表示
  erase_all()
  s = "ROUND " + str$(round)
  bg_print(12, 9, s)
  m_stop()
  m_assign(8, 1) /* ch1 : trk1((メインループウェイト用))
  for i = 0 to 39
    m_play(8)
    while m_stat(8) = 1
    endwhile
  next
  /*
  for i = 0 to 8
    tp_x(i) = 0
    tp_y(i) = 0
    tp_cond(i) = 0
  next
  for i = 0 to 10
    dr_x(i) = 0
    dr_y(i) = 0
    dr_dir(i) = 0
    dr_cond(i) = 0
  next
  /* ラウンドデータ設定
  switch ((round - 1) mod 12)
    case 0 : game_roundinit_1() : break
    case 1 : game_roundinit_2() : break
    case 2 : game_roundinit_3() : break
    case 3 : game_roundinit_4() : break
    case 4 : game_roundinit_5() : break
    case 5 : game_roundinit_6() : break
    case 6 : game_roundinit_7() : break
    case 7 : game_roundinit_8() : break
    case 8 : game_roundinit_9() : break
    case 9 : game_roundinit_10() : break
    case 10 : game_roundinit_11() : break
    case 11 : game_roundinit_12() : break
    default : break
  endswitch
  /* 盗品
  item_left = 10
  it_type(0) = 1  /* カセット
  it_cond(0) = 1  /* 通常
  it_x(0) = 46
  it_y(0) = 8
  it_type(1) = 1  /* カセット
  it_cond(1) = 1  /* 通常
  it_x(1) = 23
  it_y(1) = 20
  it_type(2) = 2  /* テレビ
  it_cond(2) = 1  /* 通常
  it_x(2) = 28
  it_y(2) = 16
  it_type(3) = 2  /* テレビ
  it_cond(3) = 1  /* 通常
  it_x(3) = 40
  it_y(3) = 28
  it_type(4) = 3  /* マイコン
  it_cond(4) = 1  /* 通常
  it_x(4) = 8
  it_y(4) = 8
  it_type(5) = 3  /* マイコン
  it_cond(5) = 1  /* 通常
  it_x(5) = 30
  it_y(5) = 28
  it_type(6) = 4  /* モナリサ
  it_cond(6) = 1  /* 通常
  it_x(6) = 23
  it_y(6) = 12
  it_type(7) = 4  /* モナリサ
  it_cond(7) = 1  /* 通常
  it_x(7) = 6
  it_y(7) = 28
  it_type(8) = 5  /* キンコ．
  it_cond(8) = 1  /* 通常
  it_x(8) = 6
  it_y(8) = 16
  it_type(9) = 5  /* キンコ．
  it_cond(9) = 1  /* 通常
  it_x(9) = 46
  it_y(9) = 16
  /* ゲーム状態を変更
  game_status = C_GAME_STATUS_START /* ラウンドスタート
endfunc
/*
/* ラウンドデータ
/*
/* ラウンド1
func game_roundinit_1()
  game_house_1()
  /* ドア
  dr_x(0) = 9
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 1            /* ドアクローズ(通常)
  dr_x(1) = 41
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 9
  dr_y(2) = 11
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 2            /* ドアクローズ(パワー)
  dr_x(3) = 25
  dr_y(3) = 11
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  /*
  dr_x(4) = 41
  dr_y(4) = 15
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 1            /* ドアクローズ(通常)
  /*
  dr_x(5) = 9
  dr_y(5) = 19
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 1            /* ドアクローズ(通常)
  dr_x(6) = 25
  dr_y(6) = 19
  dr_dir(6) = C_DIR_LEFT    /* 左
  dr_cond(6) = 1            /* ドアクローズ(通常)
  /*
  dr_x(7) = 41
  dr_y(7) = 23
  dr_dir(7) = C_DIR_LEFT    /* 左
  dr_cond(7) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(8) = 9
  dr_y(8) = 27
  dr_dir(8) = C_DIR_RIGHT   /* 右
  dr_cond(8) = 2            /* ドアクローズ(パワー)
  dr_x(9) = 25
  dr_y(9) = 27
  dr_dir(9) = C_DIR_LEFT    /* 左
  dr_cond(9) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド2
func game_roundinit_2()
  game_house_1()
  /* ドア
  dr_x(0) = 3
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 1            /* ドアクローズ(通常)
  dr_x(1) = 41
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 31
  dr_y(2) = 11
  dr_dir(2) = C_DIR_LEFT    /* 左
  dr_cond(2) = 1            /* ドアクローズ(通常)
  /*
  dr_x(3) = 9
  dr_y(3) = 15
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 2            /* ドアクローズ(パワー)
  dr_x(4) = 25
  dr_y(4) = 15
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 1            /* ドアクローズ(通常)
  /*
  dr_x(5) = 9
  dr_y(5) = 19
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 1            /* ドアクローズ(通常)
  dr_x(6) = 35
  dr_y(6) = 19
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 1            /* ドアクローズ(通常)
  /*
  dr_x(7) = 9
  dr_y(7) = 27
  dr_dir(7) = C_DIR_RIGHT   /* 右
  dr_cond(7) = 2            /* ドアクローズ(パワー)
  dr_x(8) = 25
  dr_y(8) = 27
  dr_dir(8) = C_DIR_RIGHT   /* 右
  dr_cond(8) = 1            /* ドアクローズ(通常)
  dr_x(9) = 41
  dr_y(9) = 27
  dr_dir(9) = C_DIR_LEFT    /* 左
  dr_cond(9) = 2            /* ドアクローズ(パワー)
endfunc
/* ラウンド3
func game_roundinit_3()
  game_house_2()
  /* ドア
  dr_x(0) = 9
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 42
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 1            /* ドアクローズ(通常)
  /*
  dr_x(2) = 3
  dr_y(2) = 11
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 1            /* ドアクローズ(通常)
  dr_x(3) = 42
  dr_y(3) = 11
  dr_dir(3) = C_DIR_LEFT    /* 左
  dr_cond(3) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(4) = 42
  dr_y(4) = 23
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(5) = 8
  dr_y(5) = 27
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  dr_x(6) = 42
  dr_y(6) = 27
  dr_dir(6) = C_DIR_LEFT    /* 左
  dr_cond(6) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド4
func game_roundinit_4()
  game_house_2()
  /* ドア
  dr_x(0) = 14
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 1            /* ドアクローズ(通常)
  /*
  dr_x(1) = 7
  dr_y(1) = 11
  dr_dir(1) = C_DIR_RIGHT   /* 右
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  dr_x(2) = 43
  dr_y(2) = 11
  dr_dir(2) = C_DIR_LEFT    /* 左
  dr_cond(2) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(3) = 3
  dr_y(3) = 19
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  dr_x(4) = 47
  dr_y(4) = 19
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 1            /* ドアクローズ(通常)
  /*
  dr_x(5) = 7
  dr_y(5) = 23
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  dr_x(6) = 43
  dr_y(6) = 23
  dr_dir(6) = C_DIR_LEFT    /* 左
  dr_cond(6) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(7) = 14
  dr_y(7) = 27
  dr_dir(7) = C_DIR_LEFT    /* 左
  dr_cond(7) = 1            /* ドアクローズ(通常)
  dr_x(8) = 42
  dr_y(8) = 27
  dr_dir(8) = C_DIR_LEFT    /* 左
  dr_cond(8) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド5
func game_roundinit_5()
  game_house_2()
  /* ドア
  dr_x(0) = 9
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 41
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 3
  dr_y(2) = 11
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 1            /* ドアクローズ(通常)
  dr_x(3) = 47
  dr_y(3) = 11
  dr_dir(3) = C_DIR_LEFT    /* 左
  dr_cond(3) = 1            /* ドアクローズ(通常)
  /*
  dr_x(4) = 42
  dr_y(4) = 15
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 1            /* ドアクローズ(通常)
  /*
  dr_x(5) = 42
  dr_y(5) = 23
  dr_dir(5) = C_DIR_LEFT    /* 左
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(6) = 9
  dr_y(6) = 27
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 2            /* ドアクローズ(パワー)
  dr_x(7) = 31
  dr_y(7) = 27
  dr_dir(7) = C_DIR_RIGHT   /* 右
  dr_cond(7) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド6
func game_roundinit_6()
  game_house_3()
  /* ドア
  dr_x(0) = 43
  dr_y(0) = 7
  dr_dir(0) = C_DIR_LEFT    /* 左
  dr_cond(0) = 1            /* ドアクローズ(通常)
  /*
  dr_x(1) = 3
  dr_y(1) = 11
  dr_dir(1) = C_DIR_RIGHT   /* 右
  dr_cond(1) = 1            /* ドアクローズ(通常)
  dr_x(2) = 47
  dr_y(2) = 11
  dr_dir(2) = C_DIR_LEFT    /* 左
  dr_cond(2) = 1            /* ドアクローズ(通常)
  /*
  dr_x(3) = 7
  dr_y(3) = 15
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  dr_x(4) = 43
  dr_y(4) = 15
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(5) = 7
  dr_y(5) = 19
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  dr_x(6) = 43
  dr_y(6) = 19
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 1            /* ドアクローズ(通常)
  /*
  dr_x(7) = 19
  dr_y(7) = 23
  dr_dir(7) = C_DIR_RIGHT   /* 右
  dr_cond(7) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(8) = 7
  dr_y(8) = 27
  dr_dir(8) = C_DIR_RIGHT   /* 右
  dr_cond(8) = 2            /* ドアクローズ(パワー)
  dr_x(9) = 43
  dr_y(9) = 27
  dr_dir(9) = C_DIR_LEFT    /* 左
  dr_cond(9) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド7
func game_roundinit_7()
  game_house_4()
  /* ドア
  dr_x(0) = 43
  dr_y(0) = 7
  dr_dir(0) = C_DIR_LEFT    /* 左
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(1) = 43
  dr_y(1) = 11
  dr_dir(1) = C_DIR_RIGHT   /* 右
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 7
  dr_y(2) = 15
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 1            /* ドアクローズ(通常)
  /*
  dr_x(3) = 3
  dr_y(3) = 23
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  dr_x(4) = 20
  dr_y(4) = 23
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 2            /* ドアクローズ(パワー)
  dr_x(5) = 43
  dr_y(5) = 23
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 1            /* ドアクローズ(通常)
  /*
  dr_x(6) = 7
  dr_y(6) = 27
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 2            /* ドアクローズ(パワー)
  dr_x(7) = 25
  dr_y(7) = 27
  dr_dir(7) = C_DIR_LEFT    /* 左
  dr_cond(7) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド8
func game_roundinit_8()
  game_house_4()
  /* ドア
  dr_x(0) = 7
  dr_y(0) = 11
  dr_dir(0) = C_DIR_LEFT    /* 左
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 43
  dr_y(1) = 11
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 7
  dr_y(2) = 15
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 1            /* ドアクローズ(通常)
  /*
  dr_x(3) = 43
  dr_y(3) = 19
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  /*
  dr_x(4) = 3
  dr_y(4) = 23
  dr_dir(4) = C_DIR_RIGHT   /* 右
  dr_cond(4) = 1            /* ドアクローズ(通常)
  dr_x(5) = 19
  dr_y(5) = 23
  dr_dir(5) = C_DIR_LEFT    /* 左
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(6) = 25
  dr_y(6) = 27
  dr_dir(6) = C_DIR_LEFT    /* 左
  dr_cond(6) = 2            /* ドアクローズ(パワー)
endfunc
/* ラウンド9
func game_roundinit_9()
  game_house_5()
  /* ドア
  dr_x(0) = 9
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 31
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 1            /* ドアクローズ(通常)
  /*
  dr_x(2) = 31
  dr_y(2) = 11
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(3) = 19
  dr_y(3) = 15
  dr_dir(3) = C_DIR_LEFT    /* 左
  dr_cond(3) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(4) = 31
  dr_y(4) = 19
  dr_dir(4) = C_DIR_RIGHT   /* 右
  dr_cond(4) = 1            /* ドアクローズ(通常)
  /*
  dr_x(5) = 19
  dr_y(5) = 27
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  dr_x(6) = 31
  dr_y(6) = 27
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド10
func game_roundinit_10()
  game_house_5()
  /* ドア
  dr_x(0) = 15
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 41
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 36
  dr_y(2) = 11
  dr_dir(2) = C_DIR_LEFT    /* 左
  dr_cond(2) = 1            /* ドアクローズ(通常)
  /*
  dr_x(3) = 14
  dr_y(3) = 15
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  /*
  dr_x(4) = 3
  dr_y(4) = 19
  dr_dir(4) = C_DIR_RIGHT   /* 右
  dr_cond(4) = 1            /* ドアクローズ(通常)
  dr_x(5) = 31
  dr_y(5) = 19
  dr_dir(5) = C_DIR_RIGHT   /* 右
  dr_cond(5) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(6) = 19
  dr_y(6) = 27
  dr_dir(6) = C_DIR_LEFT    /* 左
  dr_cond(6) = 2            /* ドアクローズ(パワー)
  dr_x(7) = 31
  dr_y(7) = 27
  dr_dir(7) = C_DIR_RIGHT   /* 右
  dr_cond(7) = 1            /* ドアクローズ(通常)
endfunc
/* ラウンド11
func game_roundinit_11()
  game_house_5()
  /* ドア
  dr_x(0) = 19
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 2            /* ドアクローズ(パワー)
  dr_x(1) = 31
  dr_y(1) = 7
  dr_dir(1) = C_DIR_RIGHT   /* 右
  dr_cond(1) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(2) = 31
  dr_y(2) = 19
  dr_dir(2) = C_DIR_RIGHT   /* 右
  dr_cond(2) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(3) = 19
  dr_y(3) = 23
  dr_dir(3) = C_DIR_LEFT    /* 左
  dr_cond(3) = 2            /* ドアクローズ(パワー)
endfunc
/* ラウンド12
func game_roundinit_12()
  game_house_1()
  /* ドア
  dr_x(0) = 9
  dr_y(0) = 7
  dr_dir(0) = C_DIR_RIGHT   /* 右
  dr_cond(0) = 1            /* ドアクローズ(通常)
  dr_x(1) = 41
  dr_y(1) = 7
  dr_dir(1) = C_DIR_LEFT    /* 左
  dr_cond(1) = 1            /* ドアクローズ(通常)
  /*
  dr_x(2) = 25
  dr_y(2) = 11
  dr_dir(2) = C_DIR_LEFT    /* 左
  dr_cond(2) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(3) = 9
  dr_y(3) = 15
  dr_dir(3) = C_DIR_RIGHT   /* 右
  dr_cond(3) = 1            /* ドアクローズ(通常)
  dr_x(4) = 31
  dr_y(4) = 15
  dr_dir(4) = C_DIR_LEFT    /* 左
  dr_cond(4) = 1            /* ドアクローズ(通常)
  dr_x(5) = 41
  dr_y(5) = 15
  dr_dir(5) = C_DIR_LEFT    /* 左
  dr_cond(5) = 1            /* ドアクローズ(通常)
  /*
  dr_x(6) = 25
  dr_y(6) = 19
  dr_dir(6) = C_DIR_RIGHT   /* 右
  dr_cond(6) = 2            /* ドアクローズ(パワー)
  /*
  dr_x(7) = 3
  dr_y(7) = 23
  dr_dir(7) = C_DIR_RIGHT   /* 右
  dr_cond(7) = 1            /* ドアクローズ(通常)
  dr_x(8) = 35
  dr_y(8) = 23
  dr_dir(8) = C_DIR_RIGHT   /* 右
  dr_cond(8) = 1            /* ドアクローズ(通常)
  /*
  dr_x(9) = 9
  dr_y(9) = 27
  dr_dir(9) = C_DIR_RIGHT   /* 右
  dr_cond(9) = 2            /* ドアクローズ(パワー)
  dr_x(10) = 41
  dr_y(10) = 27
  dr_dir(10) = C_DIR_RIGHT  /* 右
  dr_cond(10) = 2           /* ドアクローズ(パワー)
endfunc
/* 屋敷1(ROUND 1〜2, 12)
func game_house_1()
  /*          0                                       1                                       2                                       3                                       4                                       5
  /*          0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3
  offscr = {  0,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0,  0
           ,  0,  0, 78, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 77,  0,  0
           ,  0, 78, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 77,  0
           , 78, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 77
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
  }
  /* トランポリン
  tp_x(0) = 2
  tp_y(0) = 30
  tp_cond(0) = 4
  tp_x(1) = 18
  tp_y(1) = 30
  tp_cond(1) = 4
  tp_x(2) = 34
  tp_y(2) = 30
  tp_cond(2) = 4
  tp_x(3) = 50
  tp_y(3) = 30
  tp_cond(3) = 4
  if (((round - 1) mod 12) = 1) then {
    tp_x(4) = 50
    tp_y(4) = 14
    tp_cond(4) = 4
    tp_x(5) = 2
    tp_y(5) = 22
    tp_cond(5) = 4
  }
endfunc
/* 屋敷2(ROUND 3〜5)
func game_house_2()
  /*          0                                       1                                       2                                       3                                       4                                       5
  /*          0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3
  offscr = {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
           ,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0
           ,  0, 78, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 77,  0
           , 78, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 77
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
  }
  /* トランポリン
  tp_x(0) = 2
  tp_y(0) = 30
  tp_cond(0) = 4
  tp_x(1) = 26
  tp_y(1) = 30
  tp_cond(1) = 4
  tp_x(2) = 50
  tp_y(2) = 30
  tp_cond(2) = 4
  tp_x(3) = 15
  tp_y(3) = 22
  tp_cond(3) = 4
  tp_x(4) = 37
  tp_y(4) = 22
  tp_cond(4) = 4
  tp_x(5) = 26
  tp_y(5) = 14
  tp_cond(5) = 4
endfunc
/* 屋敷3(ROUND 6)
func game_house_3()
  /*          0                                       1                                       2                                       3                                       4                                       5
  /*          0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3
  offscr = {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
           ,  0,  0, 78, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 77,  0,  0
           ,  0, 78, 64, 64, 77, 95, 95, 95, 95, 95, 95, 95, 78, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 77, 95, 95, 95, 95, 95, 95, 95, 78, 64, 64, 77,  0
           , 78, 67, 64, 64, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 64, 64, 67, 77
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
  }
  /* トランポリン
  tp_x(0) = 2
  tp_y(0) = 30
  tp_cond(0) = 4
  tp_x(1) = 14
  tp_y(1) = 30
  tp_cond(1) = 4
  tp_x(2) = 38
  tp_y(2) = 30
  tp_cond(2) = 4
  tp_x(3) = 50
  tp_y(3) = 30
  tp_cond(3) = 4
  tp_x(4) = 26
  tp_y(4) = 22
  tp_cond(4) = 4
  tp_x(5) = 26
  tp_y(5) = 18
  tp_cond(5) = 4
  tp_x(6) = 26
  tp_y(6) = 14
  tp_cond(6) = 4
endfunc
/* 屋敷4(ROUND 7〜8)
func game_house_4()
  /*          0                                       1                                       2                                       3                                       4                                       5
  /*          0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3
  offscr = {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
           ,  0,  0, 78, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 67, 67, 67, 67, 75, 95, 95, 76, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0, 78, 77,  0,  0
           ,  0, 78, 64, 64, 77, 95, 95, 95, 95, 95, 95, 95, 78, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 77, 95, 95, 95, 95, 95, 95, 95, 78, 64, 64, 77,  0
           , 78, 67, 64, 64, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 64, 64, 67, 77
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
  }
  /* トランポリン
  tp_x(0) = 2
  tp_y(0) = 30
  tp_cond(0) = 4
  tp_x(1) = 14
  tp_y(1) = 30
  tp_cond(1) = 4
  tp_x(2) = 38
  tp_y(2) = 30
  tp_cond(2) = 4
  tp_x(3) = 50
  tp_y(3) = 30
  tp_cond(3) = 4
  tp_x(4) = 26
  tp_y(4) = 22
  tp_cond(4) = 4
  tp_x(5) = 26
  tp_y(5) = 14
  tp_cond(5) = 4
endfunc
/* 屋敷5(ROUND 9〜11)
func game_house_5()
  /*          0                                       1                                       2                                       3                                       4                                       5
  /*          0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3
  offscr = {  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 67, 67, 67, 67, 67, 67, 67, 67, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0,  0, 78, 77,  0,  0
           ,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0, 78, 67, 67, 67, 75, 95, 95, 76, 67, 67, 67, 77,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0, 78, 75, 76, 77,  0
           , 78, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 77
           , 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 67, 67, 67, 30, 27, 27, 94, 67, 67, 67, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67, 67, 30, 94, 67, 67
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67,  0
           ,  0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67,  0
           ,  0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67,  0
           ,  0, 67,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239,239,239, 64, 64,239,239,239,239,239,239,239,239,239, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
           ,  0, 67, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 64, 64, 67,  0
  }
  /* トランポリン
  tp_x(0) = 2
  tp_y(0) = 30
  tp_cond(0) = 4
  tp_x(1) = 26
  tp_y(1) = 30
  tp_cond(1) = 4
  tp_x(2) = 50
  tp_y(2) = 30
  tp_cond(2) = 4
  tp_x(3) = 2
  tp_y(3) = 14
  tp_cond(3) = 4
  tp_x(4) = 13
  tp_y(4) = 26
  tp_cond(4) = 4
  tp_x(5) = 39
  tp_y(5) = 26
  tp_cond(5) = 4
  tp_x(6) = 50
  tp_y(6) = 14
  tp_cond(6) = 4
endfunc
/*
/* ラウンドスタート
/*
func game_start()
  str s
  int spd
  int pb
  /* 敵のスピード値の初期値を設定
  spd = 2 + ((round - 1) / 2)
  item_multiple = 1       /* 盗品の倍率
  /* マッピー
  mp_x = 48               /* マッピーX座標
  mp_y = 28               /* マッピーY座標
  mp_vx = 0               /* マッピーX移動量
  mp_vy = 0               /* マッピーY移動量
  mp_wait_value = 3       /* マッピーウェイト値(3フレームに1回ウェイト)
  mo_wait_cnt = 0         /* マッピーウェイトカウンタ
  mp_dir = C_DIR_RIGHT    /* マッピーの向き
  if ((opt_machine = 1) or (opt_machine = 2)) then {
    mp_pb = 6
  } else {
    mp_pb = 1
  }
  mp_anim = 0             /* マッピーのアニメパターン
  mp_cond = 0             /* マッピーの状態
  mp_tpox = 255           /* マッピーが最後に乗ったトランポリンのインデックス 
  /* 敵配置
  /* 共通設定
  for i = 0 to 8
    en_type(i) = 0
    en_vx(i) = 0
    en_vy(i) = 0
    en_anim(i) = 0
    en_cond(i) = 0
    en_wait_cnt(i) = 0
    en_sleep_cnt(i) = 0
    en_target_y(i) = 0
    en_target_dir(i) = 0
  next
  /* ニャームコ
  en_type(0) = 1
  en_x(0) = 37
  en_y(0) = 12
  en_wait_value(0) = 2
  en_dir(0) = C_DIR_LEFT  /* 左
  if ((opt_machine = 1) or (opt_machine = 2)) then {
    en_pb(0) = 3
  } else {
    en_pb(0) = 1
  }
  en_sprno(0) = 80
  if ((opt_machine = 1) or (opt_machine = 2)) then {
    pb = 4
  } else {
    pb = 1
  }
  /* ミューキーズ
  en_type(1) = 2
  en_x(1) = 44
  en_y(1) = 8
  en_wait_value(1) = spd
  en_dir(1) = C_DIR_RIGHT /* 右
  en_sprno(1) = 72
  en_pb(1) = pb
  /* ミューキーズ
  en_type(2) = 2
  en_x(2) = 37
  en_y(2) = 24
  en_wait_value(2) = spd
  en_dir(2) = C_DIR_LEFT  /* 左
  en_sprno(2) = 72
  en_pb(2) = pb
  /* ミューキーズ
  en_type(3) = 2
  en_x(3) = 12
  en_y(3) = 12
  en_wait_value(3) = spd
  en_dir(3) = C_DIR_RIGHT /* 右
  en_sprno(3) = 72
  en_pb(3) = pb
  /* 画面消す
  erase_all()
  /* 画面描画
  bg_set(0, 0, 0)
  bg_set(1, 1, 0)
  /*   BG#1に屋敷描画
  pb = 1
  if ((opt_machine = 1) or (opt_machine = 2)) then {
    switch (round mod 3)
      case 1 : pb = 3 : break /* 赤
      case 2 : pb = 5 : break /* 緑
      case 0 : pb = 2 : break /* 青
      default : break
    endswitch
  }
  for i = 0 to 3
    for j = 0 to 53
      bg_put(1, j, i+3, pat_dat(0, 0, pb, offscr(i*54 + j)))
    next
  next
  pb = 1
  for i = 4 to 28
    for j = 0 to 53
      bg_put(1, j, i+3, pat_dat(0, 0, pb, offscr(i*54 + j)))
    next
  next
  /*   BG#1にトランポリン描画
  for i = 0 to 8
    if (tp_cond(i) > 0) then {
      bg_put(1, tp_x(i)    , tp_y(i), pat_dat(0, 0, 1, &H34))
      bg_put(1, tp_x(i) + 1, tp_y(i), pat_dat(0, 0, 1, &H34))
    }
  next
  /*   BG#1にドア描画
  for i = 0 to 10
    if (dr_x(i) > 0) then {
      draw_door(i)
    }
  next
  /*   BG#0にスコアなどを描画
  s = "1UP"
  bg_print(5, 0, s)
  s = "HI-SCORE"
  bg_print(11, 0, s)
  s = "MP"
  bg_print(22, 0, s)
  s = "R"
  bg_print(27, 0, s)
  bg_printscore()
  s = right$("  " + str$(mp_left), 2)
  bg_print(22, 1, s)
  s = right$("  " + str$(round), 2)
  bg_print(26, 1, s)
  /* BG初期位置セット
  bg_x = 22
  bg_scroll(1, bg_x * 8, 0)
  bg_set(0, 0, 1)
  bg_set(1, 1, 1)
  /* サウンド設定
  m_stop()
  m_assign(8, 1) /* ch8 : trk1(メインループウェイト用)
  m_assign(1, 3) /* ch1 : trk3(メインBGM)
  /* 経過時間リセット
  tick = 0
  /* ゲーム状態を変更
  game_status = C_GAME_STATUS_MAIN /* ラウンドスタート
endfunc
/*
/* メインルーチン
/*
func game_main()
  char cd
  /*
  if (m_stat(1) = 0) then {
    m_play(1) /* メインBGM演奏
  }
  m_play(8)  /* ウェイト用の音符を鳴らす
  move_mappy()
  move_enemy()
  /* ウェイト
  trg = 0
  while m_stat(8) = 1
    get_control()
  endwhile
  /*
  /* 画面描画
  /*
  /* BG#1スクロール
  if ((mp_x - bg_x < C_DISP_WIDTH / 2) and (bg_x > 0)) then {
    bg_x = bg_x - 1
  }
  if ((mp_x - bg_x > C_DISP_WIDTH / 2) and (bg_x < (C_BG_WIDTH - C_DISP_WIDTH))) then {
    bg_x = bg_x + 1
  }
  bg_scroll(1, bg_x * 8, 0)
  /* 盗品
  draw_item()
  /* トランポリン
  draw_trampoline()
  /* マッピー
  sp_set(0, spr_x(mp_x) + 16, spr_y(mp_y) + 16, pat_dat(0, 0, mp_pb, (mp_dir * 2) + 64 + mp_anim))
  /* 敵
  for i = 0 to 8
    if (en_type(i) > 0) then {
      if (en_type(i) = 1) then {
        /* ニャームコ
        switch en_cond(i)
          case 0 : cd = 80 + en_anim(i) : break
          case 1 : cd = 80 + en_anim(i) : break
          case 2 : cd = 84 + en_anim(i) : break
          case 3 : cd = 80 + en_anim(i) : break
          case 4 : cd = 80 + en_anim(i) : break
          case 5 : cd = 86 : break
          default : break
        endswitch
      } else if (en_type(i) = 2) then {
        /* ミューキーズ
        switch en_cond(i)
          case 0 : cd = 72 + (en_dir(i) * 2) + en_anim(i) : break
          case 1 : cd = 72 + (en_dir(i) * 2) + en_anim(i) : break
          case 2 : cd = 76 + en_anim(i) : break
          case 3 : cd = 72 + (en_dir(i) * 2) + en_anim(i) : break
          case 4 : cd = 72 + (en_dir(i) * 2) + en_anim(i) : break
          case 5 : cd = 78 + en_dir(i) : break
          default : break
        endswitch
      }
      if ((en_sleep_cnt(i) > 0) and (en_sleep_cnt(i) < 8) and (tick mod 2 = 0)) then {
        sp_set(10 + i, 0, 0, pat_dat(-16, -16, en_pb(i), cd))
      } else {
        sp_set(10 + i, spr_x(en_x(i)) + 16, spr_y(en_y(i)) + 16, pat_dat(0, 0, en_pb(i), cd))
      }
    }
  next
  /* 盗品のスコア
  if (item_score_cnt > 0) then {
    draw_itemscore()
  }
  /* 経過時間加算
  tick = tick + 1
endfunc
/*
/* トランポリン描画
/*
func draw_trampoline()
  int i
  char v
/*
  for i = 0 to 8
    if (tp_cond(i) > 0) then {
      if (tp_cond(i) = 1) then {
        v = &H2A
      } else {
        v = &H34
      }
      if ((opt_machine = 1) or (opt_machine = 2)) then {
        switch tp_cond(i)
          case 4 : pb = 1 : break   /* 白
          case 3 : pb = 2 : break   /* 青
          case 2 : pb = 7 : break   /* 黄
          case 1 : pb = 3 : break   /* 赤
          default : break
        endswitch
      } else {
        pb = 1
      }
      vpoke(tp_x(i)    , tp_y(i), 0)
      vpoke(tp_x(i) + 1, tp_y(i), 0)
    } else {
      v = &H00
    }
    bg_put(1, tp_x(i)    , tp_y(i), pat_dat(0, 0, pb, v))
    bg_put(1, tp_x(i) + 1, tp_y(i), pat_dat(0, 0, pb, v))
  next
endfunc
/*
/* マッピー移動
/*
func move_mappy()
  mp_wait_cnt = mp_wait_cnt + 1
  if (mp_wait_cnt = mp_wait_value) then {
    mp_wait_cnt = 0
  } else {
    switch mp_cond
      case 0 : move_mappy_floor() : break
      case 1 : move_mappy_toupdown() : break
      case 2 : move_mappy_updown() : break
      case 3 : move_mappy_tofloor() : break
      default : break
    endswitch
    /* 座標変更
    mp_x = mp_x + mp_vx
    mp_y = mp_y + mp_vy
    if (mp_x < 0) then {
      mp_x = 0
    }
    if (mp_x > C_BG_WIDTH - 2) then {
      mp_x = C_BG_WIDTH - 2
    }
    if (mp_y > 30) then {
      mp_y = 30
    }
    /* アニメパターン変更
    if (mp_cond <> 0) or (stk <> 0) then {
      mp_anim = mp_anim xor 1
    } else {
      mp_anim = 0
    }
  }
endfunc
/*
/* マッピー床移動
/*
func move_mappy_floor()
  char v
/*
  mp_vy = 0
  mp_vx = 0
  if (stk = 4) then {
    /* 左入力
    mp_dir = C_DIR_LEFT
    mp_vx = - 1
    /* BG判定
    v = vpeek(mp_x - 1, mp_y + 1)
    if (v = 64) then {
      mp_vy = - 1
      mp_cond = 1 /* トランポリンに乗る
    } else if (v <> 0) then {
      mp_vx = 0
    }
  } else if (stk = 6) then {
    /* 右入力
    mp_dir = C_DIR_RIGHT
    mp_vx = 1
    /* BG判定
    v = vpeek(mp_x + 2, mp_y + 1)
    if (v = 64) then {
      mp_vy = - 1
      mp_cond = 1 /* トランポリンに乗る
    } else if (v <> 0) then {
      mp_vx = 0
    }
  }
  if (trg > 0) then {
    /* 操作対象ドア検索
    dr_n = search_door(mp_x, mp_y, mp_dir)
    if (dr_n <> 255) then {
      if (dr_cond(dr_n) = 0) then {
        /* ドアクローズ
        dr_cond(dr_n) = 1
        /* マッピーがドアにかかっているか
        if (dr_dir(dr_n) <> mp_dir) then {
          if (iabs((dr_x(dr_n) + 1) - mp_x) < 3) then {
            mp_vx = 0
            if (mp_dir = C_DIR_LEFT) then {
              mp_x = mp_x - 4
            } else {
              mp_x = mp_x + 4
            }
          }
        } else {
          if (iabs((dr_x(dr_n) + 1) - (mp_x + 2 - (mp_dir * 4))) < 4) then {
            mp_vx = 0
            if (mp_dir = C_DIR_LEFT) then {
              mp_x = mp_x + 4
            } else {
              mp_x = mp_x - 4
            }
          }
        }
      } else {
        /* ドアオープン
        if (dr_cond(dr_n) = 1) then {
          /* 通常ドアオープン
          dr_cond(dr_n) = 0
        } else {
          /* パワードアオープン
          dr_cond(dr_n) = 0
          /* マイクロウェーブ発生
        }
        /* マッピーがドアにかかっているか
        if (iabs((dr_x(dr_n) + 1) - mp_x) < 3) and (dr_dir(dr_n) <> mp_dir) then {
          mp_vx = 0
          if (mp_dir = C_DIR_LEFT) then {
            mp_x = mp_x + 4
          } else {
            mp_x = mp_x - 4
          }
        }
      }
      draw_door(dr_n)
    }
  }
endfunc
/*
/* マッピー上下移動移行
/*
func move_mappy_toupdown()
  mp_vy = 1
  mp_dir = C_DIR_CENTER
  mp_cond = 2
endfunc
/*
/* マッピー上下移動
/*
func move_mappy_updown()
  int i
  char v
  /*
  mp_vx = 0
  /* 移動先チェック（下）
  if (mp_vy = 1) then {
    /* 移動先にトランポリンがあるか
    for i = 0 to 8
      if ((mp_x = tp_x(i)) and (mp_y + 1 = tp_y(i)) and (tp_cond(i) > 0)) then {
        mp_tpix = i
        tp_cond(i) = tp_cond(i) - 1
        if (tp_cond(i) > 0) then {
          bg_put(1, tp_x(i)    , tp_y(i), pat_dat(0, 0, 1, 119))
          bg_put(1, tp_x(i) + 1, tp_y(i), pat_dat(0, 0, 1, 118))
          mp_vy = -1
          score = score + 10
          bg_printscore()
        } else {
          bg_put(1, tp_x(i)    , tp_y(i), pat_dat(0, 0, 1, 0))
          bg_put(1, tp_x(i) + 1, tp_y(i), pat_dat(0, 0, 1, 0))
          vpoke(tp_x(i)    , tp_y(i), 64)
          vpoke(tp_x(i) + 1, tp_y(i), 64)
        }
        vpoke(tp_x(i)    , tp_y(i), 64)
        vpoke(tp_x(i) + 1, tp_y(i), 64)
      }
    next
  }
  /* 移動先チェック
  if (vpeek(mp_x, mp_y + mp_vy) <> 64) then {
    mp_vy = 1
  }
  /* 入力チェック
  if ((stk > 0) and (mp_vy = -1) and ((mp_y - 8) mod 4 = 0)) then {
    if (stk = 4) then {
      /* 左入力
      v = vpeek(mp_x - 1, mp_y + 1)
    } else if (stk = 6) then {
      /* 右入力
      v = vpeek(mp_x + 2, mp_y + 1)
    }
    if (v = 0) then {
      mp_cond = 3
      if (stk = 4) then {
        mp_dir = C_DIR_LEFT
        mp_vx = -1
      } else {
        mp_dir = C_DIR_RIGHT
        mp_vx = 1
      }
      mp_vy = - 1
    } else {
      mp_vy = 1
    }
  }
endfunc
/*
/* マッピー床移動移行
/*
func move_mappy_tofloor()
  mp_vy = 1
  mp_cond = 0
  /* トランポリン状態設定
  if (mp_tpix <> 255) then {
    tp_cond(mp_tpix) = 4
    mp_tpix = 255
  }
endfunc
/*
/* 敵移動
/*
func move_enemy()
  for i = 0 to 7
    en_wait_cnt(i) = en_wait_cnt(i) + 1
    if (en_wait_cnt(i) = en_wait_value(i)) then {
      en_wait_cnt(i) = 0
    } else {
      switch en_type(i)
        case 1 : move_nyamco(i) : break
        case 2 : move_myukies(i) : break
        default : break
      endswitch
    }
  next
endfunc
/*
/* ニャームコ移動
/*
func move_nyamco(num;int)
  /* アニメパターン変更
  if (en_cond(num) = 2) then {
    en_anim(num) = en_anim(num) xor 1
  } else {
    en_anim(num) = en_anim(num) + 1
    if (en_anim(num) > 3) then {
      en_anim(num) = 0
    }
  }
endfunc
/*
/* ミューキーズ移動
/*
func move_myukies(num;int)
  switch en_cond(num)
    case 0 : move_myukies_floor(num) : break
    case 1 : move_myukies_toupdown(num) : break
    case 2 : move_myukies_updown(num) : break
    case 3 : move_myukies_tofloor(num) : break
    case 4 : move_myukies_checkback(num) : break
    case 5 : move_myukies_knockdown(num) : break
    default : break
  endswitch
  /* 座標変更
  en_x(num) = en_x(num) + en_vx(num)
  en_y(num) = en_y(num) + en_vy(num)
  if (en_x(num) < 0) then {
    en_x(num) = 0
  }
  if (en_x(num) > C_BG_WIDTH - 2) then {
    en_x(num) = C_BG_WIDTH - 2
  }
  /* アニメパターン変更
  en_anim(num) = en_anim(num) xor 1
endfunc
/*
/* ミューキーズ床移動
/*
func move_myukies_floor(num;int)
  int i
  int dr_n
  char v
/*
  en_vx(num) = 0
  en_vy(num) = 0
  if (en_dir(num) = C_DIR_LEFT) then {
    en_vx(num) = -1
    v = vpeek(en_x(num) - 1, en_y(num) + 1)
  } else {
    en_vx(num) = 1
    v = vpeek(en_x(num) + 2, en_y(num) + 1)
  }
  if (v = 64) then {
    /* トランポリンに乗る
    en_vy(num) = -1
    en_cond(num) = 1
  } else if (v <> 0) then {
    /* 操作対象ドア検索
    dr_n = search_door(en_x(num) + en_vx(num), en_y(num), en_dir(num))
    if ((dr_n = 255) or (dr_cond(dr_n) = 2)) then {
      /* 進行方向を反転させる
      en_vx(num) = en_vx(num) * -1
      en_dir(num) = en_dir(num) xor 1
    } else if (dr_cond(dr_n) = 1) then {
      /* 通常ドアオープン
      dr_cond(dr_n) = 0
      draw_door(dr_n)
      if (dr_dir(dr_n) <> en_dir(num)) then {
        /* 後ろに吹っ飛んで気絶させる
        en_cond(num) = 5
        if (en_dir(num) = C_DIR_LEFT) then {
          en_vx(num) = 1
          en_dir(num) = C_DIR_RIGHT
        } else {
          en_vx(num) = -1
          en_dir(num) = C_DIR_LEFT
        }
        for i = 1 to 3
          if (en_dir(num) = C_DIR_LEFT) then {
            v = vpeek(en_x(num) - 1, en_y(num) + 1)
          } else {
            v = vpeek(en_x(num) + 2, en_y(num) + 1)
          }
          if (v = 64) then {
            /* トランポリンに乗る
            en_vy(num) = -1
            en_cond(num) = 1
            en_sleep_cnt(num) = 0
            break
          }
          en_x(num) = en_x(num) + en_vx(num)
        next
        if (en_cond(num) = 5) then {
          en_vx(num) = 0
          en_sleep_cnt(num) = 16
        }
      }
    }
  }
endfunc
/*
/* ミューキーズ上下移動移行
/*
func move_myukies_toupdown(num;int)
  en_vy(num) = 1
  en_dir(num) = C_DIR_CENTER
  en_cond(num) = 2
  en_target_y(num) = 0
endfunc
/*
/* ミューキーズ上下移動
/*
func move_myukies_updown(num;int)
  int i
  char v
  /*
  en_vx(num) = 0
  if (en_vy(num) = 1) then {
    /* 移動先チェック（下）
    for i = 0 to 8
      /* 移動先にトランポリンがあるか
      if ((en_x(num) = tp_x(i))) and (en_y(num) + 1 = tp_y(i) and (tp_cond(i) > 0)) then {
        bg_put(1, tp_x(i)    , tp_y(i), pat_dat(0, 0, 1, 119))
        bg_put(1, tp_x(i) + 1, tp_y(i), pat_dat(0, 0, 1, 118))
        en_vy(num) = -1
        if (en_target_y(num) = 0) then {
          /* 目標の階と方向を設定
          move_myukies_settarget(num)
          /* 下の階の床にマッピーがいるか
          if ((mp_cond = 0) and (en_y(num) < mp_y)) then {
            /* 今の階で降りるようにする
            en_target_y(num) = en_y(num) - 1
          }
        }
      }
    next
  } else {
    /* 移動先チェック（上）
    if (vpeek(en_x(num), en_y(num) - 1) <> 64) then {
      /* 床 or 天井に当たったら下向きに移動
      en_vy(num) = 1
      /* 上の階の床にマッピーがいるか
      if ((mp_cond = 0) and (en_y(num) > mp_y)) then {
        /* 今の階で降りるようにする
        en_target_y(num) = en_y(num) + 1
      } else {
        en_target_y(num) = 0
      }
    }
    if ((num = 1) and (en_target_y(num) = 0) and ((en_y(num) - 8) mod 4 = 0)) then {
      /* 目標の階と方向を設定
      move_myukies_settarget(num)
      /* 下の階の床にマッピーがいるか
      if ((mp_cond = 0) and (en_y(num) < mp_y)) then {
        /* 今の階で降りるようにする
        en_target_y(num) = en_y(num)
      }
    }
  }
  /* トランポリンから降りるか
  if ((en_vy(num) = -1) and (en_y(num) = en_target_y(num))) then {
    if (en_target_dir(num) = C_DIR_LEFT) then {
      v = vpeek(en_x(num) - 1, en_y(num) + 1)
    } else if (en_target_dir(num) = C_DIR_RIGHT) then {
      v = vpeek(en_x(num) + 2, en_y(num) + 1)
    }
    if (v = 0) then {
      en_cond(num) = 3
      en_dir(num) = en_target_dir(num)
      if (en_target_dir(num) = C_DIR_LEFT) then {
        en_vx(num) = -1
      } else {
        en_vx(num) = 1
      }
      en_vy(num) = -1
    } else {
      en_vy(num) = 1
      /* 目標の階と方向を設定
      move_myukies_settarget(num)
    }
  }
endfunc
/*
/* ミューキーズ床移動移行
/*
func move_myukies_tofloor(num;int)
  en_vy(num) = 1
  en_target_y(num) = 0
  if (num = 1) then {
    en_cond(num) = 4
  } else {
    en_cond(num) = 0
  }
endfunc
/*
/* ミューキーズ振り向き判定
/*
func move_myukies_checkback(num;int)
  if ((en_dir(num) = C_DIR_LEFT) and (en_x(num) < mp_x)) then {
    en_dir(num) = C_DIR_RIGHT
    en_vx(num) = 1
    en_vy(num) = -1
    en_cond(num) = 1  /* トランポリンに乗る
  } else if ((en_dir(num) = C_DIR_RIGHT) and (en_x(num) > mp_x)) then {
    en_dir(num) = C_DIR_LEFT
    en_vx(num) = -1
    en_vy(num) = -1
    en_cond(num) = 1  /* トランポリンに乗る
  } else {
    en_cond(num) = 0
    en_vy(num) = 0
  }
endfunc
/*
/* ミューキーズ気絶
/*
func move_myukies_knockdown(num;int)
  en_sleep_cnt(num) = en_sleep_cnt(num) - 1
  if (en_sleep_cnt(num) = 0) then {
    en_cond(num) = 0
  }
endfunc
/*
/* ミューキーズ目標床・方向設定
/*
func move_myukies_settarget(num;int)
  int wk_y
  /* マッピーの状態を判定
  if (mp_cond = 0) then {
    /* マッピーが床にいるとき
    /* マッピーのY座標と、方向を目標の初期値にする
    wk_y = mp_y
  } else {
    /* マッピーが床にいないとき
    /* マッピーのY座標と移動方向から、次の階と方向を決める
    /* 6階=8, 5階=12, 4階=16, 3階=20, 2階=24, 1階=28
    /* マッピーの取りうるY座標：5〜30
    wk_y = ((mp_y + (mp_vy * 3)) / 4) * 4
    if (wk_y < 8) then {
      wk_y = 8
    } else if (wk_y > 28) then {
      wk_y = 28
    }
  }
  en_target_y(num) = wk_y
  /*
  if (mp_x < en_x(num)) then {
    en_target_dir(num) = C_DIR_LEFT
  } else {
    en_target_dir(num) = C_DIR_RIGHT
  }
endfunc
/*
/* 盗品表示
/*
func draw_item()
  int i
  int j
  char v
  /*
  for i = 0 to 9
    /* 盗品取得チェック
    if (it_cond(i) > 0) then {
      if ((it_x(i) = mp_x) and (it_y(i) = mp_y)) then {
        /* スコア表示
        item_score_cnt = 8
        if (it_cond(i) > 1) then {
          item_multiple = item_multiple + 1
          item_score = str$(it_type(i) * 100) + "X" + str$(item_multiple)
        } else {
          item_score = str$(it_type(i) * 100)
        }
        item_score_x = it_x(i) - 2
        item_score_y = it_y(i) - 1
        j = 0
        repeat
          j = j + 1
          v = asc(mid$(item_score, j, 1))
          if (v > 0) then {
            if (v >= '0' and v <= '9') then {
              bg_put(1, item_score_x + j, item_score_y, pat_dat(0, 0, 1, v - 16))
            } else {
              bg_put(1, item_score_x + j, item_score_y, pat_dat(0, 0, 1, 24))
            }
          }
        until v = 0
        /* スコア加算
        score = score + (it_type(i) * 100 * item_multiple)
        bg_printscore()
        /* 取った盗品を取得済にする
        it_cond(i) = 0
        /* 一旦すべての倍率をリセットする
        for j = 0 to 9
          if (it_cond(j) > 0) then {
            it_cond(j) = 1
          }
        next
        /* 取った盗品と同じものがまだ残ってたら倍率を設定
        if ((i > 0) and ((it_type(i - 1) = it_type(i)) and (it_cond(i - 1) > 0))) then {
          it_cond(i - 1) = 2
        }
        if ((i < 9) and ((it_type(i + 1) = it_type(i)) and (it_cond(i + 1) > 0))) then {
          it_cond(i + 1) = 2
        }
        /* 盗品の残りをデクリメント
        item_left = item_left - 1
        if (item_left = 0) then {
          game_status = C_GAME_STATUS_CLEAR
        }
      }
      /* 表示
      if (it_cond(i) = 1) then {
        sp_move(30 + i, spr_x(it_x(i)), spr_y(it_y(i)), 90 + it_type(i) - 1)
      } else if (it_cond(i) > 1) then {
        if (tick mod 2 = 0) then {
          sp_move(30 + i, spr_x(it_x(i)), spr_y(it_y(i)), 90 + it_type(i) - 1)
        } else {
          sp_move(30 + i, spr_x(it_x(i)), spr_y(it_y(i)), 95)
        }
      }
    } else {
      sp_move(30 + i, -16, -16, 90 + it_type(i) - 1)
    }
  next
endfunc
/*
/* 盗品得点表示制御
/*
func draw_itemscore()
  int i
  int p
  char v
  /*
  item_score_cnt = item_score_cnt - 1
  if (item_score_cnt = 0) then {
    p = 0
    repeat
      p = p + 1
      v = asc(mid$(item_score, p, 1))
      bg_put(1, item_score_x + p, item_score_y, pat_dat(0, 0, 1, 0))
    until v = 0
    for i = 0 to 10
      if (dr_y(i) > 0) then {
        draw_door(i)
      }
    next
  }
endfunc
/*
/* 操作対象ドア検索
/* in:
/*    int   x         キャラクターX座標
/*    int   y         キャラクターY座標
/*    int   d         キャラクターの向き(0=左、1=右)
/* out:
/*   int   操作対象ドアの配列番号(存在しない時は255)
/*
func int search_door(x;int, y;int, d;int)
  int i
  int door_n = 255
  int dist = 255
  int w_dist
  /*
  for i = 0 to 10 /* すべてのドアについて比較する
    if (dr_y(i) = y - 1) then {
      w_dist = 255
      if (d = 0 and dr_dir(i) = 0 and dr_x(i) < x + 1) then w_dist = x + 1 - dr_x(i)
      if (d = 1 and dr_dir(i) = 0 and dr_x(i) > x - 1) then w_dist = dr_x(i) - x - 1
      if (d = 0 and dr_dir(i) = 1 and dr_x(i) < x - 1) then w_dist = x - 1 - dr_x(i)
      if (d = 1 and dr_dir(i) = 1 and dr_x(i) > x - 3) then w_dist = dr_x(i) - x - 3
      if (dist > w_dist) then {
        dist = abs(dr_x(i) - x)
        door_n = i
      }
    }
  next
  return(door_n)
endfunc
/*
/* ドア描画
/* in:
/*    int   dr_n      ドアの要素番号
/*
func draw_door(dr_n;int)
  int ix, iy, i, j
  /* パターン設定
  ix = (dr_cond(dr_n) * 2) + dr_dir(dr_n)
  /* 描画
  iy = 0
  for i = 0 to 2
    for j = 0 to 3 
      bg_put(1, dr_x(dr_n) + j, dr_y(dr_n) + i, pat_dat(0, 0, 1, dr_chr(ix, iy)))
      iy = iy + 1
    next 
  next
  /* 仮想画面への情報更新
  if (dr_cond(dr_n) = 0) then {
    /* dr_cond = 0 の時は開きドアなので仮想画面にゼロを設定
    vpoke(dr_x(dr_n) + 1, dr_y(dr_n) + 2, 0)
    vpoke(dr_x(dr_n) + 2, dr_y(dr_n) + 2, 0)
  } else {
    /* dr_cond = 1, 2 の時は閉じドアなので仮想画面に壁と同じ情報を設定
    vpoke(dr_x(dr_n) + 1, dr_y(dr_n) + 2, 67)
    vpoke(dr_x(dr_n) + 2, dr_y(dr_n) + 2, 67)
  }
endfunc
/*
/* ラウンドクリア
/*
func game_clear()
  m_stop()
  m_assign(1, 5) /* ch1 : trk5(ラウンドクリア)
  m_play(1)
  while m_stat(1) = 1
  endwhile
  /*
  round = round + 1
  game_status = C_GAME_STATUS_ROUNDINIT
endfunc
/*
/* オプション
/*
func game_option()
  int i
  str s
  dim str menu_str(2, 4)
  dim int menu_val(2)
  mp_y = 0
  menu_str = {"MZ-80K    ", "MZ-700    ", "MZ-700 PCG", "MZ-1500   ", "",
              "EASY  ", "NORMAL", "HARD  ", "", "",
              "1", "3", "5", "", ""}
  menu_val = {0, 1, 1}
  menu_val(0) = opt_machine
  menu_val(1) = opt_level
  menu_val(2) = opt_left
  /* 画面消す
  erase_all()
  /* 画面描画
  bg_set(0, 0, 0)
  bg_set(1, 1, 0)
  /*
  m_stop()
  m_assign(8, 1) /* ch8 : trk1(メインループウェイト用)
  /*
  s = "OPTIONS"
  bg_print(13, 6, s)
  s = "-------"
  bg_print(13, 7, s)
  s = "MACHINE"
  bg_print(8, 11, s)
  s = "LEVEL"
  bg_print(8, 13, s)
  s = "PLAYER"
  bg_print(8, 15, s)
  s = "PUSH BUTTON TO EXIT."
  bg_print(6, 24, s)
  bg_set(0, 0, 1)
  bg_set(1, 1, 1)
  trg = 0
  while trg = 0
    m_play(8)  /* ウェイト用の音符を鳴らす
    if ((stk = 2) and (mp_y < 2)) then mp_y = mp_y + 1
    if ((stk = 8) and (mp_y > 0)) then mp_y = mp_y - 1
    sp_move(0, 5 * 8, (((mp_y * 2) + 10) * 8 + 4), 66)
    /*
    if ((stk = 4) and (menu_val(mp_y) > 0)) then {
      menu_val(mp_y) = menu_val(mp_y) - 1
    }
    if ((stk = 6) and (menu_str(mp_y, menu_val(mp_y) + 1) <> "")) then {
      menu_val(mp_y) = menu_val(mp_y) + 1
    }
    for i = 0 to 2
      s = menu_str(i, menu_val(i))
      bg_print(18, (i * 2) + 11, s)
    next
    /* ウェイト
    while m_stat(8) = 1
      get_control()
    endwhile
  endwhile
  /* オプション設定値反映
  if (opt_machine <> menu_val(0)) then {
    opt_machine = menu_val(0)
    sprite_pattern()
  }
  opt_level = menu_val(1)
  opt_left = menu_val(2)
  game_status = C_GAME_STATUS_TITLE   /* タイトル
endfunc
/*
/* 仮想画面X座標からスプライト表示X座標を取得
/* in:
/*    int   txt_x     仮想画面X座標(テキスト)
/* out:
/*    int   スプライト表示X座標(表示範囲外のときは-16)
/*
func int spr_x(txt_x;int)
  int spr_x
  spr_x = (txt_x - bg_x) * 8
  if (spr_x < -16) or (spr_x > 255) then {
    spr_x = -16
  } 
  return(spr_x)
endfunc
/*
/* テキストY座標からスプライト表示Y座標を取得
/* in:
/*    int   txt_y     仮想画面Y座標(テキスト)
/* out:
/*    int   スプライト表示Y座標(表示範囲外のときは-16)
/*
func int spr_y(txt_y;int)
  int spr_y
  spr_y = (txt_y) * 8
  if (spr_y < -16) or (spr_y > 255) then {
    spr_y = -16
  }
  return(spr_y)
endfunc
/*
/* BG面・スプライト消去
/* in:
/*    なし
/* out:
/*    なし
/*
func erase_all()
  bg_fill(0, pat_dat(0, 0, 1, &H0))
  bg_fill(1, pat_dat(0, 0, 1, &H0))
  for i=0 to 127
    sp_set(i, 0, 0, pat_dat(0, 0, 1, 0))
  next
  /*
  trg = 0
  stk = 0
  while inkey$(0) <> ""
  endwhile
endfunc
/*
/* 仮想画面の指定座標のデータを取得する
/* in:
/*    int   x         仮想画面X座標
/*    int   y         仮想画面Y座標
/* out:
/*    char  指定座標の仮想画面データ
/*
func char vpeek(x;int, y;int)
  char data
  data = offscr(((y - 3) * C_BG_WIDTH) + x)
  return(data)
endfunc
/*
/* 仮想画面の指定座標にデータを設定する
/* in:
/*    int   x         仮想画面X座標
/*    int   y         仮想画面Y座標
/*    int   data      書き込むデータ
/* out:
/*    なし
/*
func char vpoke(x;int, y;int, data;int)
  offscr(((y - 3) * C_BG_WIDTH) + x) = data
endfunc
/*
/* 絶対値算出(int型)
/* in:
/*    int   v         値
/* out:
/*    int   値の絶対値
/*
func int iabs(v;int)
  if (v < 0) then {
    v = v * -1
  }
  return(v)
endfunc
/*
/* 英数字表示
/* in:
/*    char  x         BG面のX座標(0〜63)
/*    char  y         BG面のY座標(0〜63)
/*    str   value     表示する文字列
/* out:
/*    なし
/*
func bg_print(x;char, y;char, value;str)
  int p = 0
  char data
  char v
  while asc(mid$(value, p+1, 1)) <> 0
    data = 0
    v = asc(mid$(value, p+1, 1))
    /* MZのディスプレイコードへの変換
    if (v >= '0' and v <= '9') then {
      data = v - 16
    } else if (v >= 'A' and v <= 'Z') then {
      data = v - 64
    } else if (v = '-') then {
      data = 42
    } else if (v = '.') then {
      data = 46
    } else if (v = '!') then {
      data = 97
    } else if (v = '&') then {
      data = 102
    } else if (v = '(') then {
      data = 104
    } else if (v = ')') then {
      data = 105
    }
    bg_put(0, x + p, y, pat_dat(0, 0, 1, data))
    p = p + 1
  endwhile
endfunc
/*
/* スコア表示
/* in:
/*    なし
/* out:
/*    なし
/*
func bg_printscore()
  str s
  /*
  if (score > hiscore) then {
    hiscore = score
  }
  /* TODO : エクステンド処理
  s = right$("      " + str$(score), 6)
  bg_print(4, 1, s)
  s = right$("      " + str$(hiscore) , 6)
  bg_print(13, 1, s)
endfunc
/*
/* パターンデータ取得
/* in:
/*    char  vr        垂直反転(0:通常、1:垂直反転)
/*    char  hr        水平反転(0:通常、1:水平反転)
/*    char  pb        パレットブロック(1〜15)
/*    char  cd        パターンコード(0〜255)
/* out:
/*    int   パターンデータ
/*
func int pat_dat(vr;char, hr;char, pb;char, cd;char)
  return(vr*32768 + hr*16384 + pb*256 + cd)
endfunc
/*
/* スプライト定義(16x16)
/* No64〜で定義
/*
func sprite_pattern()
  int f
  char n
  str fname
  dim char c(255)
  /*
  if (opt_machine = 2) then {
    fname = "sprite-pcg.dat"
  } else {
    fname = "sprite-txt.dat"
  }
  /*
  f = fopen(fname, "r")
  if (f = -1) then {
    game_status = C_GAME_STATUS_QUIT
    errmsg = "カレントディレクトリに " + fname + " がありません。"
    return()
  }
  n = fgetc(f)
  while n <> 255
    fread(c, 256, f)
    sp_def(n, c, 1)
    n = fgetc(f)
  endwhile
  fclose(f)
endfunc
/*
/* バックグラウンドの設定
/* No0〜255でキャラクターコードに対応する番号で定義
/*
func bg_pattern()
  int f
  char n
  str fname
  dim char c(63)
  /*
  fname = "bg.dat"
  /*
  f = fopen(fname, "r")
  if (f = -1) then {
    game_status = C_GAME_STATUS_QUIT
    errmsg = "カレントディレクトリに " + fname + " がありません。"
    return()
  }
  n = fgetc(f)
  while n <> 255
    fread(c, 64, f)
    sp_def(n, c, 0)
    n = fgetc(f)
  endwhile
  fclose(f)
endfunc
/*
/* パレットの設定
/*
func sprite_pallet()
  /* パレットブロック1：白
  sp_color(0,0,1)
  sp_color(1,1,1)
  sp_color(2,32,1)
  sp_color(3,62,1)
  sp_color(4,1024,1)
  sp_color(5,1984,1)
  sp_color(6,1056,1)
  sp_color(7,2046,1)
  sp_color(8,32768,1)
  sp_color(9,63488,1)
  sp_color(10,32800,1)
  sp_color(11,63550,1)
  sp_color(12,33792,1)
  sp_color(13,65472,1)
  sp_color(14,44394,1)
  sp_color(15,65534,1)
  /* パレットブロック2：青
  sp_color(0,0,2)
  sp_color(1,1,2)
  sp_color(15,62,2)
  /* パレットブロック3：赤
  sp_color(0,0,3)
  sp_color(1,1,3)
  sp_color(15,1984,3)
  /* パレットブロック4：マゼンタ
  sp_color(0,0,4)
  sp_color(1,1,4)
  sp_color(15,2046,4)
  /* パレットブロック5：緑
  sp_color(0,0,5)
  sp_color(1,1,5)
  sp_color(15,63488,5)
  /* パレットブロック6：水色
  sp_color(0,0,6)
  sp_color(1,1,6)
  sp_color(15,63550,6)
  /* パレットブロック7：黄色
  sp_color(0,0,7)
  sp_color(1,1,7)
  sp_color(15,65472,7)
endfunc
